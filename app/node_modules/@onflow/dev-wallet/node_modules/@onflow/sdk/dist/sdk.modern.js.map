{"version":3,"file":"sdk.modern.js","sources":["../src/build/index.js","../src/resolve/index.js","../src/build/authorizations.js","../src/build/get-account.js","../src/build/get-events.js","../src/build/get-latest-block.js","../src/build/get-block-by-id.js","../src/build/get-block-by-height.js","../src/build/get-transaction-status.js","../src/build/limit.js","../src/build/params.js","../src/build/arguments.js","../src/build/proposer.js","../src/build/payer.js","../src/build/ping.js","../src/build/ref.js","../src/build/script.js","../src/build/transaction.js","../src/build/validator.js","../src/build/invariant.js","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/resolve/resolve-accounts.js","../src/resolve/resolve-arguments.js","../src/resolve/resolve-params.js","../src/resolve/resolve-signatures.js","../src/resolve/resolve-validators.js","../src/resolve/resolve-proposer-sequence-number.js","../src/resolve/resolve-ref-block-id.js"],"sourcesContent":["import {pipe, interaction} from \"@onflow/interaction\"\n\nexport function build(fns = []) {\n  return pipe(interaction(), fns)\n}\n","import {pipe} from \"@onflow/interaction\"\n\nexport const resolve = pipe\n","import {pipe, makeAuthorizer} from \"@onflow/interaction\"\n\nconst isFn = d => typeof d === \"function\"\n\nexport function authorizations(ax = []) {\n  return pipe(\n    ax.map(authorization => {\n      const a = isFn(authorization)\n        ? { resolve: authorization }\n        : authorization\n    \n      return makeAuthorizer({ ...a, role: { authorizer: true }})\n    }\n  ))\n}\n\nexport function authorization(addr, signingFunction, keyId, sequenceNum) {\n  return {addr, signingFunction, keyId, sequenceNum}\n}\n","import {pipe, makeGetAccount, Ok} from \"@onflow/interaction\"\n\nexport function getAccount(addr) {\n  return pipe([\n    makeGetAccount,\n    ix => {\n      ix.accountAddr = addr\n      return Ok(ix)\n    }\n  ])\n}\n","import {pipe, Ok, makeGetEvents} from \"@onflow/interaction\"\n\nexport function getEvents(eventType, start, end) {\n  return pipe([\n    makeGetEvents,\n    ix => {\n      ix.events.eventType = eventType\n      return Ok(ix)\n    },\n    ix => {\n      ix.events.start = start\n      return Ok(ix)\n    },\n    ix => {\n      ix.events.end = end\n      return Ok(ix)\n    }\n  ])\n}\n","import {pipe, Ok, makeGetLatestBlock} from \"@onflow/interaction\"\n\nexport function getLatestBlock(isSealed = false) {\n  return pipe([\n    makeGetLatestBlock,\n    ix => {\n      ix.block.isSealed = isSealed\n      return Ok(ix)\n    }\n  ])\n}\n","import {pipe, Ok, makeGetBlockById} from \"@onflow/interaction\"\n\nexport function getBlockById(id) {\n  return pipe([\n    makeGetBlockById,\n    ix => {\n      ix.block.id = id\n      return Ok(ix)\n    }\n  ])\n}\n","import {pipe, Ok, makeGetBlockByHeight} from \"@onflow/interaction\"\n\nexport function getBlockByHeight(height) {\n  return pipe([\n    makeGetBlockByHeight,\n    ix => {\n      ix.block.height = height\n      return Ok(ix)\n    }\n  ])\n}\n","import {pipe, Ok, makeGetTransactionStatus} from \"@onflow/interaction\"\n\nexport function getTransactionStatus(transactionId) {\n  return pipe([\n    makeGetTransactionStatus,\n    ix => {\n      ix.transactionId = transactionId\n      return Ok(ix)\n    }\n  ])\n}\n","import {pipe, Ok} from \"@onflow/interaction\"\n\nexport function limit(computeLimit) {\n  return pipe([\n    ix => {\n      ix.message.computeLimit = computeLimit\n      return Ok(ix)\n    }\n  ])\n}\n","import {pipe, makeParam} from \"@onflow/interaction\"\n\nconst isFn = d => typeof d === \"function\"\n\nexport function params(px = []) {\n  return pipe(\n    px.map(param => {\n      const p = isFn(param)\n        ? { resolve: param }\n        : param\n    \n      return makeParam(p)\n    }\n  ))\n}\n\nconst identity = {\n  asArgument: v => v,\n  asInjection: v => v,\n}\n\nexport function param(value, xform = identity, key = null) {\n  return {key, value, xform}\n}\n","import {pipe, makeArgument} from \"@onflow/interaction\"\n\nconst isFn = d => typeof d === \"function\"\n\nexport function args(ag = []) {\n  return pipe(\n    ag.map(arg => {\n      const a = isFn(arg)\n        ? { resolve: arg }\n        : arg\n    \n      return makeArgument(a)\n    }\n  ))\n}\n\nconst identity = {\n  asArgument: v => v,\n  asInjection: v => v,\n}\n\nexport function arg(value, xform = identity) {\n  return {value, xform}\n}\n","import {pipe, makeProposer} from \"@onflow/interaction\"\n\nconst isFn = d => typeof d === \"function\"\n\nexport async function proposer(ax) {\n  if (isFn(ax)) {\n    return makeProposer(\n      {\n        resolve: ax,\n        role: {proposer: true},\n      }\n    )\n  } else {\n    return makeProposer(\n      {\n        ...ax,\n        role: {proposer: true},\n      }\n    )\n  }\n}\n","import {pipe, makePayer} from \"@onflow/interaction\"\n\nconst isFn = d => typeof d === \"function\"\n\nexport function payer(authz) {\n  const a = isFn(authz)\n    ? {resolve: authz}\n    : authz\n\n  return makePayer({ ...a, role: { payer: true }})\n}\n","import {pipe, makePing} from \"@onflow/interaction\"\n\nexport function ping() {\n  return pipe([makePing])\n}\n","import {pipe, Ok} from \"@onflow/interaction\"\n\nexport function ref(refBlock) {\n  return pipe([\n    ix => {\n      ix.message.refBlock = refBlock\n      return Ok(ix)\n    }\n  ])\n}\n","import {pipe, Ok, put, makeScript} from \"@onflow/interaction\"\nimport {templar} from \"@qvvg/templar\"\n\nexport function script(...args) {\n  return pipe([makeScript, put(\"ix.cadence\", templar(...args))])\n}\n","import {pipe, put, Ok, makeTransaction} from \"@onflow/interaction\"\nimport {templar} from \"@qvvg/templar\"\n\nconst DEFAULT_COMPUTE_LIMIT = 10\nconst DEFAULT_SCRIPT_ACCOUNTS = []\nconst DEFUALT_REF = null\n\nexport function transaction(...args) {\n  return pipe([\n    makeTransaction,\n    put(\"ix.cadence\", templar(...args)),\n    ix => {\n      ix.message.computeLimit = ix.message.computeLimit || DEFAULT_COMPUTE_LIMIT\n      ix.message.refBlock = ix.message.refBlock || DEFUALT_REF\n      ix.authorizations = ix.authorizations || DEFAULT_SCRIPT_ACCOUNTS\n      return Ok(ix)\n    },\n  ])\n}\n","import { update } from \"@onflow/interaction\"\n\nexport function validator(cb) {\n    return update('ix.validators', validators => \n        Array.isArray(validators) ? validators.push(cb) : [cb]\n    )\n}\n","import { Ok, Bad } from \"@onflow/interaction\"\n\nexport function invariant(...args) {\n    if (args.length > 1) {\n      const [predicate, message] = args\n      return invariant((ix, { Ok, Bad }) => {\n        return predicate ? Ok(ix) : Bad(ix, message)\n      })\n    }\n    const [fn] = args\n    return ix => fn(ix, {Ok, Bad})\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import {pipe, isTransaction, Ok} from \"@onflow/interaction\"\n\nconst isFn = d => typeof d === \"function\"\nconst isNumber = d => typeof d === \"number\"\nconst isString = d => typeof d === \"string\"\n\nconst invariant = (fact, msg, ...rest) => {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`)\n    error.stack = error.stack\n      .split(\"\\n\")\n      .filter(d => !/at invariant/.test(d))\n      .join(\"\\n\")\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\")\n    throw error\n  }\n}\n\nconst accountCanFulfillRoles = account => {\n  if (account.role.proposer) {\n    if (\n      !isString(account.addr) ||\n      !isNumber(account.keyId) ||\n      !isNumber(account.sequenceNum) ||\n      !isFn(account.signingFunction)\n    )\n      return false\n  }\n  if (account.role.payer) {\n    if (\n      !isString(account.addr) ||\n      !isNumber(account.keyId) ||\n      !isFn(account.signingFunction)\n    )\n      return false\n  }\n  if (account.role.authorizer) {\n    if (\n      !isString(account.addr) ||\n      !isNumber(account.keyId) ||\n      !isFn(account.signingFunction)\n    )\n      return false\n  }\n  return true\n}\n\nconst firstNonNull = (values = []) => values.filter(Boolean)[0] || null\nconst firstNonNullKeyId = (values = []) =>\n  typeof values.filter(isNumber)[0] === \"number\"\n    ? values.filter(isNumber)[0]\n    : null\nconst findProposer = (accounts = []) =>\n  accounts.find(d => d.role.proposer) || {}\n\nconst deepMergeAccount = (into, from) => ({\n  kind: firstNonNull([into.kind, from.kind]),\n  tempId: firstNonNull([into.tempId, from.tempId]),\n  addr: firstNonNull([into.addr, from.addr]),\n  keyId: firstNonNullKeyId([into.keyId, from.keyId]),\n  sequenceNum:\n    typeof findProposer([into, from]).sequenceNum === \"number\"\n      ? findProposer([into, from]).sequenceNum\n      : into.sequenceNum,\n  signature: firstNonNull([into.signature, from.signature]),\n  signingFunction: firstNonNull([into.signingFunction, from.signingFunction]),\n  resolve: firstNonNull([into.resolve, from.resolve]),\n  role: {\n    proposer: into.role.proposer || from.role.proposer,\n    authorizer: into.role.authorizer || from.role.authorizer,\n    payer: into.role.payer || from.role.payer,\n    param: into.role.param || from.role.param,\n  },\n})\n\nexport const enforceResolvedAccounts = async ix => {\n  if (!isTransaction(ix)) return Ok(ix)\n  for (let [tempId, account] of Object.entries(ix.accounts)) {\n    if (isFn(account.resolve))\n      ix.accounts[tempId] = await account.resolve(account)\n    invariant(\n      accountCanFulfillRoles(ix.accounts[tempId]),\n      \"Account unable to fulfill role\",\n      ix.accounts[tempId]\n    )\n  }\n  return Ok(ix)\n}\n\nexport const dedupeResolvedAccounts = async ix => {\n  if (!isTransaction(ix)) return Ok(ix)\n  for (let account of Object.values(ix.accounts)) {\n    const cid = `${account.addr}|${account.keyId}`\n    if (ix.accounts[cid] != null) {\n      ix.accounts[cid] = deepMergeAccount(ix.accounts[cid], {\n        tempId: cid,\n        ...account,\n      })\n    } else {\n      ix.accounts[cid] = {tempId: cid, ...account}\n    }\n    if (ix.proposer === account.tempId) ix.proposer = cid\n    if (ix.payer === account.tempId) ix.payer = cid\n    ix.authorizations = ix.authorizations.map(d =>\n      d === account.tempId ? cid : d\n    )\n    delete ix.accounts[account.tempId]\n  }\n  for (let account of Object.values(ix.accounts)) {\n    invariant(\n      accountCanFulfillRoles(account),\n      \"Account unable to fulfill roles\",\n      account\n    )\n  }\n  return Ok(ix)\n}\n\nexport const resolveAccounts = pipe([\n  enforceResolvedAccounts,\n  dedupeResolvedAccounts,\n])\n","import {isTransaction, isScript, Ok} from \"@onflow/interaction\"\n\nexport const resolveArguments = async (ix) => {\n  if (!(isTransaction(ix) || isScript(ix))) return Ok(ix)\n  \n  let unresolvedArguments = Object\n      .values(ix.arguments)\n  let args = await Promise.all(unresolvedArguments.map(\n    async function resArg(ua) {\n      if (typeof ua.resolve === \"function\") return ({\n        ...await ua.resolve(),\n        tempId: ua.tempId\n      })\n      return ua\n    }\n  ))\n  args.forEach(a => {\n    ix.arguments[a.tempId] = {\n      ...a,\n      asArgument: a.xform.asArgument(a.value),\n    }\n  })\n\n  return Ok(ix)\n}\n","import {isTransaction, isScript, get, Ok} from \"@onflow/interaction\"\n\nconst isFn = d => typeof d === \"function\"\nconst isString = s => typeof s === \"string\"\n\nexport const resolveParams = async (ix) => {\n  if (!(isTransaction(ix) || isScript(ix))) return Ok(ix)\n  const cadence = get(ix, 'ix.cadence')\n  if (isString(cadence)) {\n    ix.message.cadence = cadence\n    return Ok(ix)\n  }\n  if (isFn(cadence)) {\n    let unresolvedParams = Object\n      .values(ix.params)\n    let params = await Promise.all(unresolvedParams.map(\n      async function resParam(up) {\n        if (typeof up.resolve === \"function\") return ({\n          ...await up.resolve(),\n          tempId: up.tempId\n        })\n        return up\n      }\n    ))\n    params.forEach(p => {\n      ix.params[p.tempId] = p\n    })\n    params = Object.fromEntries(params\n      .filter(param => param.key != null)\n      .map(param => [param.key, param.xform.asInjection(param.value)]))\n\n    ix.message.cadence = cadence(params)\n\n    return Ok(ix)\n  }\n  throw new Error(\"Invalid Cadence Value\")\n}\n","import {isTransaction} from \"@onflow/interaction\"\nimport {\n  encodeTransactionPayload as encodeInsideMessage,\n  encodeTransactionEnvelope as encodeOutsideMessage,\n} from \"@onflow/encode\"\n\nfunction prepForEncoding(ix) {\n  return {\n    script: ix.message.cadence,\n    refBlock: ix.message.refBlock || null,\n    gasLimit: ix.message.computeLimit,\n    arguments: ix.message.arguments.map(cid => ix.arguments[cid].asArgument),\n    proposalKey: {\n      address: ix.accounts[ix.proposer].addr,\n      keyId: ix.accounts[ix.proposer].keyId,\n      sequenceNum: ix.accounts[ix.proposer].sequenceNum,\n    },\n    payer: ix.accounts[ix.payer].addr,\n    authorizers: ix.authorizations.map(cid => ix.accounts[cid].addr),\n  }\n}\n\nasync function fetchSignatures(ix, signers = [], message) {\n  return Promise.all(\n    signers.map(async cid => {\n      const compSig = await ix.accounts[cid].signingFunction({\n        message,\n        addr: ix.accounts[cid].addr,\n        keyId: ix.accounts[cid].keyId,\n        roles: ix.accounts[cid].role, // grr this should be roles,\n        interaction: ix,\n      })\n      compSig.cid = cid\n      if (ix.accounts[cid].addr !== compSig.addr) {\n        throw new Error(`${cid} — mismatching address in composite signature`)\n      }\n      if (ix.accounts[cid].keyId !== compSig.keyId) {\n        throw new Error(`${cid} — mismatching keyId in composite signature`)\n      }\n      compSig.sig = compSig.signature\n      compSig.address = compSig.addr\n      return compSig\n    })\n  )\n}\n\nfunction collateSigners(ix) {\n  // inside signers are: (authorizers + proposer) - payer\n  let insideSigners = new Set(ix.authorizations)\n  insideSigners.add(ix.proposer)\n  insideSigners.delete(ix.payer)\n  insideSigners = Array.from(insideSigners)\n\n  // outside signers are: payer\n  let outsideSigners = new Set([ix.payer])\n  outsideSigners = Array.from(outsideSigners)\n\n  return {insideSigners, outsideSigners}\n}\n\nfunction mutateAccountsWithSignatures(ix, compSigs) {\n  for (let {cid, signature} of compSigs) {\n    ix.accounts[cid].signature = signature\n  }\n  return compSigs\n}\n\nexport async function resolveSignatures(ix) {\n  if (!isTransaction(ix)) return ix\n\n  const {insideSigners, outsideSigners} = collateSigners(ix)\n\n  // Get inside composite signatures for inside payload in parallel\n  const insideSignatures = mutateAccountsWithSignatures(\n    ix,\n    await fetchSignatures(\n      ix,\n      insideSigners,\n      encodeInsideMessage(prepForEncoding(ix))\n    )\n  )\n\n  // Get outside composite signatures for outside payload in parallel\n  const outsideSignatures = mutateAccountsWithSignatures(\n    ix,\n    await fetchSignatures(\n      ix,\n      outsideSigners,\n      encodeOutsideMessage({\n        ...prepForEncoding(ix),\n        payloadSigs: insideSignatures,\n      })\n    )\n  )\n\n  return ix\n}\n\n// TODO — WHAT WE WANT INSTEAD OF WHAT WE HAVE\n//\n// encodeInsideMessage({\n//   cadence: ___,\n//   refBlock: ___,\n//   computeLimit: ___,\n//   proposer: {\n//     addr: ___,\n//     keyId: ___,\n//     sequenceNum: __,\n//   },\n//   payer: ___,\n//   authorizers: [___],\n// })\n//\n// encodeInsideMessage({\n//   ...ix.message,\n//   proposer: ix.accounts[ix.proposer],\n//   payer: ix.accounts[ix.payer].addr,\n//   authorizers: ix.authorizers.map(cid => ix.accounts[cid].addr)\n// })\n//\n// encodeOutsideMessage({\n//   cadence: ___,\n//   refBlock: ___,\n//   computeLimit: ___,\n//   proposer: {\n//     addr: ___,\n//     keyId: ___,\n//     sequenceNum: __,\n//   },\n//   payer: ___,\n//   authorizers: [___],\n//   payloadSigs: [{ addr, keyId, signature }],\n// })\n//\n// encodeOutsideMessage({\n//   ...ix.message,\n//   proposer: ix.accounts[ix.proposer],\n//   payer: ix.accounts[ix.payer].addr,\n//   authorizers: ix.authorizers.map(cid => ix.accounts[cid].addr),\n//   payloadSigs: insideSignatures,\n// })\n","import { get, pipe, Ok, Bad } from \"@onflow/interaction\"\n\nexport async function resolveValidators(ix) {\n    const validators = get(ix, 'ix.validators', [])\n\n    return pipe(ix, validators.map(cb => ix => cb(ix, { Ok, Bad })))\n}   \n","import {isTransaction, Ok} from \"@onflow/interaction\"\nimport {send} from \"@onflow/send\"\nimport {decodeResponse} from \"@onflow/decode\"\nimport {build} from \"../build\"\nimport {getAccount} from \"../build/get-account\"\n\nexport const resolveProposerSequenceNumber = ({ node }) => async (ix) => {\n    if (!(isTransaction(ix))) return Ok(ix)\n    if (ix.accounts[ix.proposer].sequenceNum) return Ok(ix)\n\n    const response = await send(await build([\n        getAccount(ix.accounts[ix.proposer].addr)\n      ]), { node })\n    const decoded = await decodeResponse(response)\n\n    ix.accounts[ix.proposer].sequenceNum = decoded.keys[ix.accounts[ix.proposer].keyId].sequenceNumber\n\n    return Ok(ix)\n}\n","import {isTransaction, Ok} from \"@onflow/interaction\"\nimport {send} from \"@onflow/send\"\nimport {decodeResponse} from \"@onflow/decode\"\nimport {build} from \"../build\"\nimport {getLatestBlock} from \"../build/get-latest-block\"\n\nexport const resolveRefBlockId = ({ node }) => async (ix) => {\n    if (!(isTransaction(ix))) return Ok(ix)\n    if (ix.message.refBlock) return Ok(ix)\n\n    const response = await send(await build([\n        getLatestBlock()\n    ]), { node })\n    const decoded = await decodeResponse(response)\n\n    ix.message.refBlock = decoded.id\n\n    return Ok(ix)\n}\n"],"names":["build","fns","pipe","interaction","resolve","authorizations","ax","map","authorization","makeAuthorizer","role","authorizer","addr","signingFunction","keyId","sequenceNum","getAccount","makeGetAccount","ix","accountAddr","Ok","getEvents","eventType","start","end","makeGetEvents","events","getLatestBlock","isSealed","makeGetLatestBlock","block","getBlockById","id","makeGetBlockById","getBlockByHeight","height","makeGetBlockByHeight","getTransactionStatus","transactionId","makeGetTransactionStatus","limit","computeLimit","message","params","px","param","makeParam","identity","asArgument","v","asInjection","value","xform","key","args","ag","arg","makeArgument","proposer","isFn","makeProposer","d","payer","authz","makePayer","ping","makePing","ref","refBlock","script","makeScript","put","templar","DEFAULT_SCRIPT_ACCOUNTS","transaction","makeTransaction","validator","cb","update","validators","Array","isArray","push","invariant","length","predicate","Bad","fn","_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","e","o","_this","pact","bind","observer","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","asyncIterator","isNumber","isString","fact","msg","error","Error","stack","split","filter","test","join","rest","console","accountCanFulfillRoles","account","firstNonNull","values","Boolean","findProposer","accounts","find","resolveAccounts","isTransaction","target","body","check","step","reject","_cycle","next","done","return","_fixup","TypeError","i","array","_forTo","Object","entries","tempId","into","from","cid","kind","signature","resolveArguments","isScript","unresolvedArguments","arguments","Promise","all","ua","forEach","a","resolveParams","cadence","get","unresolvedParams","up","p","fromEntries","_exit2","prepForEncoding","gasLimit","proposalKey","address","authorizers","resolveSignatures","insideSigners","Set","add","outsideSigners","collateSigners","fetchSignatures","encodeInsideMessage","insideSignatures","mutateAccountsWithSignatures","encodeOutsideMessage","payloadSigs","signers","roles","compSig","sig","compSigs","resolveValidators","resolveProposerSequenceNumber","node","send","response","decodeResponse","decoded","keys","sequenceNumber","resolveRefBlockId"],"mappings":"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"}