{"version":3,"file":"send.js","sources":["../src/unary.js","../src/send-transaction.js","../src/send-get-account.js","../src/send-get-latest-block.js","../src/send-get-block-by-id.js","../src/send-get-block-by-height.js","../src/send.js","../src/send-get-transaction-status.js","../src/send-execute-script.js","../src/send-get-events.js","../src/send-ping.js"],"sourcesContent":["import {grpc} from \"@improbable-eng/grpc-web\"\nimport {NodeHttpTransport} from \"@improbable-eng/grpc-web-node-http-transport\"\n\ngrpc.setDefaultTransport(NodeHttpTransport())\n\nexport async function unary(host, method, request) {\n  return new Promise((resolve, reject) => {\n    grpc.unary(method, {\n      request: request,\n      host: host,\n      onEnd: ({status, statusMessage, message}) => {\n        if (status === grpc.Code.OK) {\n          resolve(message)\n        } else {\n          reject(new Error(statusMessage))\n        }\n      },\n    })\n  })\n}\n","import {AccessAPI, Transaction, SendTransactionRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad) =>\n  Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\nconst scriptBuffer = script => Buffer.from(script, \"utf8\")\nconst hexBuffer = hex => Buffer.from(hex, \"hex\")\nconst addressBuffer = addr => paddedHexBuffer(addr, 8)\nconst argumentBuffer = arg => Buffer.from(JSON.stringify(arg), \"utf8\")\n\nexport async function sendTransaction(ix, opts = {}) {\n  const tx = new Transaction()\n  tx.setScript(scriptBuffer(ix.message.cadence))\n  tx.setGasLimit(ix.message.computeLimit)\n  tx.setReferenceBlockId(ix.message.refBlock ? hexBuffer(ix.message.refBlock) : null)\n  tx.setPayer(addressBuffer(ix.accounts[ix.payer].addr))\n  ix.message.arguments.forEach(arg => tx.addArguments(argumentBuffer(ix.arguments[arg].asArgument)))\n  ix.authorizations.forEach(tempId => tx.addAuthorizers(addressBuffer(ix.accounts[tempId].addr)))\n\n  const proposalKey = new Transaction.ProposalKey()\n  proposalKey.setAddress(addressBuffer(ix.accounts[ix.proposer].addr))\n  proposalKey.setKeyId(ix.accounts[ix.proposer].keyId)\n  proposalKey.setSequenceNumber(ix.accounts[ix.proposer].sequenceNum)\n\n  tx.setProposalKey(proposalKey)\n\n  ix.authorizations.forEach(tempId => {\n    if (ix.accounts[tempId].signature === null || ix.accounts[tempId].role.payer) return\n    const authzSig = new Transaction.Signature()\n    authzSig.setAddress(addressBuffer(ix.accounts[tempId].addr))\n    authzSig.setKeyId(ix.accounts[tempId].keyId)\n    authzSig.setSignature(hexBuffer(ix.accounts[tempId].signature))\n\n    tx.addPayloadSignatures(authzSig)\n  })\n\n  const payerSig = new Transaction.Signature()\n  payerSig.setAddress(addressBuffer(ix.accounts[ix.payer].addr))\n  payerSig.setKeyId(ix.accounts[ix.payer].keyId)\n  payerSig.setSignature(hexBuffer(ix.accounts[ix.payer].signature))\n\n  tx.addEnvelopeSignatures(payerSig)\n\n  const req = new SendTransactionRequest()\n  req.setTransaction(tx)\n\n  const res = await unary(opts.node, AccessAPI.SendTransaction, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.transactionId = u8ToHex(res.getId_asU8())\n\n  return ret\n}\n","import {GetAccountRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad) =>\n  Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\n\nconst addressBuffer = addr => paddedHexBuffer(addr, 8)\n\nexport async function sendGetAccount(ix, opts = {}) {\n  const req = new GetAccountRequest()\n  req.setAddress(addressBuffer(ix.accountAddr))\n\n  const res = await unary(opts.node, AccessAPI.GetAccount, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  const account = res.getAccount()\n  ret.account = {\n    address: u8ToHex(account.getAddress_asU8()),\n    balance: account.getBalance(),\n    code: account.getCode_asU8(),\n    keys: account.getKeysList().map(publicKey => ({\n      index: publicKey.getIndex(),\n      publicKey: u8ToHex(publicKey.getPublicKey_asU8()),\n      signAlgo: publicKey.getSignAlgo(),\n      hashAlgo: publicKey.getHashAlgo(),\n      weight: publicKey.getWeight(),\n      sequenceNumber: publicKey.getSequenceNumber(),\n    })),\n  }\n\n  return ret\n}\n","import {GetLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\n\nconst latestBlockDeprecationNotice = () => {\n  console.error(\n    `\n          %c@onflow/send Deprecation Notice\n          ========================\n\n          Operating upon data of the latestBlock field of the interaction object is deprecated and will no longer be recognized in future releases of @onflow/send.\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/send/WARNINGS.md#0001-Deprecating-latestBlock-field\n\n          =======================\n        `\n      .replace(/\\n\\s+/g, \"\\n\")\n      .trim(),\n    \"font-weight:bold;font-family:monospace;\"\n  )\n}\n\nexport async function sendGetLatestBlock(ix, opts = {}) {\n  const req = new GetLatestBlockRequest()\n\n  if (ix.latestBlock && ix.latestBlock.isSealed) {\n    req.setIsSealed(ix.latestBlock.isSealed)\n    latestBlockDeprecationNotice()\n  }\n\n  if (ix.block && ix.block.isSealed) {\n    req.setIsSealed(ix.block.isSealed)\n  }\n\n  const res = await unary(opts.node, AccessAPI.GetLatestBlock, req)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8()),\n    parentId: u8ToHex(block.getParentId_asU8()),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8()),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8()),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8()),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {GetBlockByIDRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = hex => Buffer.from(hex, \"hex\")\n\nexport async function sendGetBlockById(ix, opts = {}) {\n  const req = new GetBlockByIDRequest()\n  req.setId(hexBuffer(ix.block.id))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByID, req)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8()),\n    parentId: u8ToHex(block.getParentId_asU8()),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8()),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8()),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8()),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {GetBlockByHeightRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\n\nexport async function sendGetBlockByHeight(ix, opts = {}) {\n  const req = new GetBlockByHeightRequest()\n  req.setHeight(ix.block.height)\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByHeight, req)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8()),\n    parentId: u8ToHex(block.getParentId_asU8()),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8()),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8()),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8()),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {\n  isTransaction,\n  isGetTransactionStatus,\n  isScript,\n  isGetAccount,\n  isGetEvents,\n  isGetLatestBlock,\n  isGetBlockById,\n  isGetBlockByHeight,\n  isPing\n} from \"@onflow/interaction\"\nimport {sendTransaction} from \"./send-transaction\"\nimport {sendGetTransactionStatus} from \"./send-get-transaction-status\"\nimport {sendExecuteScript} from \"./send-execute-script\"\nimport {sendGetAccount} from \"./send-get-account\"\nimport {sendGetEvents} from \"./send-get-events\"\nimport {sendGetLatestBlock} from \"./send-get-latest-block\"\nimport {sendGetBlockById} from \"./send-get-block-by-id\"\nimport {sendGetBlockByHeight} from \"./send-get-block-by-height\"\nimport {sendPing} from \"./send-ping\"\n\nexport const send = async (ix, opts = {}) => {\n  switch (true) {\n    case isTransaction(ix):\n      return sendTransaction(ix, opts)\n    case isGetTransactionStatus(ix):\n      return sendGetTransactionStatus(ix, opts)\n    case isScript(ix):\n      return sendExecuteScript(ix, opts)\n    case isGetAccount(ix):\n      return sendGetAccount(ix, opts)\n    case isGetEvents(ix):\n      return sendGetEvents(ix, opts)\n    case isGetLatestBlock(ix):\n      return sendGetLatestBlock(ix, opts)\n    case isGetBlockById(ix):\n      return sendGetBlockById(ix, opts)\n    case isGetBlockByHeight(ix):\n      return sendGetBlockByHeight(ix, opts)\n    case isPing(ix):\n      return sendPing(ix, opts)\n    default:\n      return ix\n  }\n}\n","import {AccessAPI, GetTransactionRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = hex => Buffer.from(hex, \"hex\")\n\nexport async function sendGetTransactionStatus(ix, opts = {}) {\n  const req = new GetTransactionRequest()\n  req.setId(hexBuffer(ix.transactionId))\n\n  const res = await unary(opts.node, AccessAPI.GetTransactionResult, req)\n\n  let events = res.getEventsList()\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.transaction = {\n    status: res.getStatus(),\n    statusCode: res.getStatusCode(),\n    errorMessage: res.getErrorMessage(),\n    events: events.map(event => ({\n      type: event.getType(),\n      transactionId: u8ToHex(event.getTransactionId_asU8()),\n      transactionIndex: event.getTransactionIndex(),\n      eventIndex: event.getEventIndex(),\n      payload: JSON.parse(Buffer.from(event.getPayload_asU8()).toString(\"utf8\")),\n    })),\n  }\n\n  return ret\n}\n","import {ExecuteScriptAtLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst argumentBuffer = arg => Buffer.from(JSON.stringify(arg), \"utf8\")\n\nexport async function sendExecuteScript(ix, opts = {}) {\n  const req = new ExecuteScriptAtLatestBlockRequest()\n  const code = Buffer.from(ix.message.cadence, \"utf8\")\n  ix.message.arguments.forEach(arg => req.addArguments(argumentBuffer(ix.arguments[arg].asArgument)))\n  req.setScript(code)\n\n  const res = await unary(opts.node, AccessAPI.ExecuteScriptAtLatestBlock, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.encodedData = JSON.parse(Buffer.from(res.getValue_asU8()).toString(\"utf8\"))\n\n  return ret\n}\n","import {GetEventsForHeightRangeRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\n\nexport async function sendGetEvents(ix, opts = {}) {\n  const req = new GetEventsForHeightRangeRequest()\n  req.setType(ix.events.eventType)\n  req.setStartHeight(Number(ix.events.start))\n  req.setEndHeight(Number(ix.events.end))\n\n  const res = await unary(opts.node, AccessAPI.GetEventsForHeightRange, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  const results = res.getResultsList()\n  ret.events = results.reduce((blocks, result) => {\n    const blockId = result.getBlockId()\n    const blockHeight = result.getBlockHeight()\n    const events = result.getEventsList()\n    events.forEach(event => {\n      blocks.push({\n        blockId,\n        blockHeight,\n        type: event.getType(),\n        transactionId: u8ToHex(event.getTransactionId_asU8()),\n        transactionIndex: event.getTransactionIndex(),\n        eventIndex: event.getEventIndex(),\n        payload: JSON.parse(Buffer.from(event.getPayload_asU8()).toString(\"utf8\")),\n      })\n    })\n    return blocks\n  }, [])\n\n  return ret\n}\n","import {AccessAPI, PingRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nexport async function sendPing(ix, opts = {}) {\n  const req = new PingRequest()\n\n  const res = await unary(opts.node, AccessAPI.Ping, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  return ret\n}\n"],"names":["unary","host","method","request","Promise","resolve","reject","grpc","onEnd","statusMessage","status","Code","OK","message","Error","setDefaultTransport","NodeHttpTransport","hexBuffer","hex","Buffer","from","addressBuffer","addr","padStart","pad","u8ToHex","u8","toString","ix","opts","isTransaction","tx","Transaction","setScript","cadence","setGasLimit","computeLimit","setReferenceBlockId","refBlock","setPayer","accounts","payer","arguments","forEach","arg","addArguments","JSON","stringify","argumentBuffer","asArgument","authorizations","tempId","addAuthorizers","proposalKey","ProposalKey","setAddress","proposer","setKeyId","keyId","setSequenceNumber","sequenceNum","setProposalKey","signature","role","authzSig","Signature","setSignature","addPayloadSignatures","payerSig","addEnvelopeSignatures","req","SendTransactionRequest","setTransaction","node","AccessAPI","SendTransaction","res","ret","response","tag","transactionId","getId_asU8","sendTransaction","isGetTransactionStatus","GetTransactionRequest","setId","GetTransactionResult","events","getEventsList","transaction","getStatus","statusCode","getStatusCode","errorMessage","getErrorMessage","map","event","type","getType","getTransactionId_asU8","transactionIndex","getTransactionIndex","eventIndex","getEventIndex","payload","parse","getPayload_asU8","sendGetTransactionStatus","isScript","ExecuteScriptAtLatestBlockRequest","code","ExecuteScriptAtLatestBlock","encodedData","getValue_asU8","sendExecuteScript","isGetAccount","GetAccountRequest","accountAddr","GetAccount","account","getAccount","address","getAddress_asU8","balance","getBalance","getCode_asU8","keys","getKeysList","publicKey","index","getIndex","getPublicKey_asU8","signAlgo","getSignAlgo","hashAlgo","getHashAlgo","weight","getWeight","sequenceNumber","getSequenceNumber","sendGetAccount","isGetEvents","GetEventsForHeightRangeRequest","setType","eventType","setStartHeight","Number","start","setEndHeight","end","GetEventsForHeightRange","results","getResultsList","reduce","blocks","result","blockId","getBlockId","blockHeight","getBlockHeight","push","sendGetEvents","isGetLatestBlock","GetLatestBlockRequest","latestBlock","isSealed","setIsSealed","console","error","replace","trim","block","GetLatestBlock","getBlock","collectionGuarantees","getCollectionGuaranteesList","blockSeals","getBlockSealsList","signatures","getSignaturesList","id","parentId","getParentId_asU8","height","getHeight","timestamp","getTimestamp","collectionGuarantee","collectionId","getCollectionId_asU8","blockSeal","getBlockId_asU8","executionReceiptId","getExecutionReceiptId_asU8","executionReceiptSignatures","getExecutionReceiptSignaturesList","resultApprovalSignatures","getResultApprovalSignaturesList","sendGetLatestBlock","isGetBlockById","GetBlockByIDRequest","GetBlockByID","sendGetBlockById","isGetBlockByHeight","GetBlockByHeightRequest","setHeight","GetBlockByHeight","sendGetBlockByHeight","isPing","PingRequest","Ping","sendPing"],"mappings":"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"}