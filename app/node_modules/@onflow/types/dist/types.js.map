{"version":3,"file":"types.js","sources":["../src/types.js"],"sourcesContent":["const type = (label, asArgument, asInjection) => ({\n  label,\n  asArgument,\n  asInjection,\n})\n\nconst isArray = (d) => Array.isArray(d)\nconst isObj = (d) => typeof d === \"object\"\nconst isNull = (d) => d == null\nconst isBoolean = (d) => typeof d === \"boolean\"\nconst isNumber = (d) => typeof d === \"number\"\nconst isInteger = (d) => Number.isInteger(d)\nconst isString = (d) => typeof d === \"string\"\n\nconst throwTypeError = (msg) => {\n  throw new Error(\"Type Error: \" + msg)\n}\n\nexport const Identity = type(\n  \"Identity\",\n  (v) => v,\n  (v) => v\n)\n\nexport const UInt = type(\n  \"UInt\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected Positive Integer for type Unsigned Int\")\n  },\n  (v) => v\n)\n\nexport const Int = type(\n  \"Int\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected Integer for type Int\")\n  },\n  (v) => v\n)\n\nexport const UInt8 = type(\n  \"UInt8\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt8\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt8\")\n  },\n  (v) => v\n)\n\nexport const Int8 = type(\n  \"Int8\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int8\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive integer for Int8\")\n  },\n  (v) => v\n)\n\nexport const UInt16 = type(\n  \"UInt16\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt16\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt16\")\n  },\n  (v) => v\n)\n\nexport const Int16 = type(\n  \"Int16\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int16\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive integer for Int16\")\n  },\n  (v) => v\n)\n\nexport const UInt32 = type(\n  \"UInt32\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt32\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt32\")\n  },\n  (v) => v\n)\n\nexport const Int32 = type(\n  \"Int32\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int32\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive integer for Int32\")\n  },\n  (v) => v\n)\n\nexport const UInt64 = type(\n  \"UInt64\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt64\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt64\")\n  },\n  (v) => v\n)\n\nexport const Int64 = type(\n  \"Int64\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int64\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive integer for Int64\")\n  },\n  (v) => v\n)\n\nexport const UInt128 = type(\n  \"UInt128\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt128\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt128\")\n  },\n  (v) => v\n)\n\nexport const Int128 = type(\n  \"Int128\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int128\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive integer for Int128\")\n  },\n  (v) => v\n)\n\nexport const UInt256 = type(\n  \"UInt256\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt256\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt256\")\n  },\n  (v) => v\n)\n\nexport const Int256 = type(\n  \"Int256\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int256\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for Int256\")\n  },\n  (v) => v\n)\n\nexport const Word8 = type(\n  \"Word8\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Word8\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive number for Word8\")\n  },\n  (v) => v\n)\n\nexport const Word16 = type(\n  \"Word16\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Word16\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive number for Word16\")\n  },\n  (v) => v\n)\n\nexport const Word32 = type(\n  \"Word32\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Word32\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive number for Word32\")\n  },\n  (v) => v\n)\n\nexport const Word64 = type(\n  \"Word64\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Word64\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive number for Word64\")\n  },\n  (v) => v\n)\n\nconst UFix64AndFix64NumberDeprecationNotice = () => {\n  console.error(\n    `\n          %c@onflow/types Deprecation Notice\n          ========================\n\n          Passing in Numbers as values for Fix64 and UFix64 types is deprecated and will cease to work in future releases of @onflow/types.\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number\n\n          =======================\n        `\n      .replace(/\\n\\s+/g, \"\\n\")\n      .trim(),\n    \"font-weight:bold;font-family:monospace;\"\n  )\n}\n\nexport const UFix64 = type(\n  \"UFix64\",\n  (v) => {\n    if (isString(v)) {\n      return {\n        type: \"UFix64\",\n        value: v\n      }\n    } else if (isNumber(v)) {\n      UFix64AndFix64NumberDeprecationNotice()\n      return {\n        type: \"UFix64\",\n        value: v.toString()\n      }\n    }\n    throwTypeError(\"Expected String for UFix64\")\n  },\n  (v) => v\n)\n\nexport const Fix64 = type(\n  \"Fix64\",\n  (v) => {\n    if (isString(v)) {\n      return {\n        type: \"Fix64\",\n        value: v\n      }\n    } else if (isNumber(v)) {\n      UFix64AndFix64NumberDeprecationNotice()\n      return {\n        type: \"Fix64\",\n        value: v.toString()\n      }\n    }\n    throwTypeError(\"Expected String for Fix64\")\n  },\n  (v) => v\n)\n\nexport const String = type(\n  \"String\",\n  (v) => {\n    if (isString(v))\n      return {\n        type: \"String\",\n        value: v,\n      }\n    throwTypeError(\"Expected String for type String\")\n  },\n  (v) => v\n)\n\nexport const Character = type(\n  \"Character\",\n  (v) => {\n    if (isString(v))\n      return {\n        type: \"Character\",\n        value: v,\n      }\n    throwTypeError(\"Expected Character for type Character\")\n  },\n  (v) => v\n)\n\nexport const Bool = type(\n  \"Bool\",\n  (v) => {\n    if (isBoolean(v))\n      return {\n        type: \"Bool\",\n        value: v,\n      }\n    throwTypeError(\"Expected Boolean for type Bool\")\n  },\n  (v) => v\n)\n\nexport const Address = type(\n  \"Address\",\n  (v) => {\n    if (isString(v))\n      return {\n        type: \"Address\",\n        value: v,\n      }\n    throwTypeError(\"Expected Address for type Address\")\n  },\n  (v) => v\n)\n\nexport const Void = type(\n  \"Void\",\n  (v) => {\n    if (!v || isNull(v))\n      return {\n        type: \"Void\",\n      }\n    throwTypeError(\"Expected Void for type Void\")\n  },\n  (v) => v\n)\n\nexport const Optional = (children) =>\n  type(\n    \"Optional\",\n    (v) => ({\n      type: \"Optional\",\n      value: isNull(v) ? null : children.asArgument(v),\n    }),\n    (v) => v\n  )\n\nexport const Reference = type(\n  \"Reference\",\n  (v) => {\n    if (isObj(v))\n      return {\n        type: \"Reference\",\n        value: v,\n      }\n    throwTypeError(\"Expected Object for type Reference\")\n  },\n  (v) => v\n)\n\nexport const _Array = (children = []) =>\n  type(\n    \"Array\",\n    (v) => {\n      return {\n        type: \"Array\",\n        value: isArray(children)\n          ? children.map((c, i) => c.asArgument(v[i]))\n          : v.map((x) => children.asArgument(x)),\n      }\n    },\n    (v) => v\n  )\n\nexport {_Array as Array}\n\nexport const Dictionary = (children = []) =>\n  type(\n    \"Dictionary\",\n    (v) => {\n      if (isObj(v))\n        return {\n          type: \"Dictionary\",\n          value: isArray(children)\n            ? children.map((c, i) => ({\n                key: c.key.asArgument(v[i].key),\n                value: c.value.asArgument(v[i].value),\n              }))\n            : isArray(v)\n            ? v.map((x) => ({\n                key: children.key.asArgument(x.key),\n                value: children.value.asArgument(x.value),\n              }))\n            : [\n                {\n                  key: children.key.asArgument(v.key),\n                  value: children.value.asArgument(v.value),\n                },\n              ],\n        }\n      throwTypeError(\"Expected Object for type Dictionary\")\n    },\n    (v) => v\n  )\n\nexport const Event = (id, fields = []) =>\n  type(\n    \"Event\",\n    (v) => {\n      if (isObj(v))\n        return {\n          type: \"Event\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map((x) => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      throwTypeError(\"Expected Object for type Event\")\n    },\n    (v) => v\n  )\n\nexport const Resource = (id, fields = []) =>\n  type(\n    \"Resource\",\n    (v) => {\n      if (isObj(v))\n        return {\n          type: \"Resource\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map((x) => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      throwTypeError(\"Expected Object for type Resource\")\n    },\n    (v) => v\n  )\n\nexport const Struct = (id, fields = []) =>\n  type(\n    \"Struct\",\n    (v) => {\n      if (isObj(v))\n        return {\n          type: \"Struct\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map((x) => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      throwTypeError(\"Expected Object for type Struct\")\n    },\n    (v) => v\n  )\n"],"names":["type","label","asArgument","asInjection","isArray","d","Array","isObj","isNull","isNumber","isInteger","Number","isString","throwTypeError","msg","Error","Identity","v","UInt","value","toString","Int","UInt8","Int8","UInt16","Int16","UInt32","Int32","UInt64","Int64","UInt128","Int128","UInt256","Int256","Word8","Word16","Word32","Word64","UFix64AndFix64NumberDeprecationNotice","console","error","replace","trim","UFix64","Fix64","String","Character","Bool","Address","Void","Reference","_Array","children","map","c","i","x","key","id","fields","name"],"mappings":"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"}